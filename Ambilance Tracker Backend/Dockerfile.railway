# Build stage
FROM maven:3.9.9-eclipse-temurin-17-alpine AS builder
WORKDIR /build

# Copy the parent pom.xml and all service files
COPY ../pom.xml .
COPY ../eureka-server/ ./eureka-server/
COPY ../api-gateway/ ./api-gateway/
COPY ../Ambulance_Service/ ./Ambulance_Service/
COPY ../dispatch-coordination-service/ ./dispatch-coordination-service/
COPY ../hospital-management-service/ ./hospital-management-service/
COPY ../route-optimization-service/ ./route-optimization-service/

# Build all services
RUN mvn clean package -DskipTests

# Runtime stage
FROM eclipse-temurin:17-jre-alpine

# Install necessary tools including PostgreSQL
RUN apk add --no-cache curl supervisor postgresql postgresql-client

# Create a non-root user
RUN addgroup -S spring && adduser -S spring -G spring

# Create directories and setup PostgreSQL
WORKDIR /app
RUN mkdir -p \
    /app/eureka-server \
    /app/api-gateway \
    /app/ambulance-service \
    /app/dispatch-service \
    /app/hospital-service \
    /app/route-service \
    /var/lib/postgresql/data && \
    chown -R postgres:postgres /var/lib/postgresql/data && \
    chmod 700 /var/lib/postgresql/data

# Copy the built JARs from builder stage
COPY --from=builder --chown=spring:spring /build/eureka-server/target/eureka-server-0.0.1-SNAPSHOT.jar /app/eureka-server/app.jar
COPY --from=builder --chown=spring:spring /build/api-gateway/target/api-gateway-0.0.1-SNAPSHOT.jar /app/api-gateway/app.jar
COPY --from=builder --chown=spring:spring /build/Ambulance_Service/target/Ambulance_Service-0.0.1-SNAPSHOT.jar /app/ambulance-service/app.jar
COPY --from=builder --chown=spring:spring /build/dispatch-coordination-service/target/dispatch-coordination-service-0.0.1-SNAPSHOT.jar /app/dispatch-service/app.jar
COPY --from=builder --chown=spring:spring /build/hospital-management-service/target/hospital-management-service-0.0.1-SNAPSHOT.jar /app/hospital-service/app.jar
COPY --from=builder --chown=spring:spring /build/route-optimization-service/target/route-optimization-service-0.0.1-SNAPSHOT.jar /app/route-service/app.jar

# Copy configuration files
COPY ./init.sql /docker-entrypoint-initdb.d/
COPY ./supervisord.conf /etc/supervisord.conf
COPY ./init-postgres.sh /docker-entrypoint-initdb.d/

# Make init script executable and run it
RUN chmod +x /docker-entrypoint-initdb.d/init-postgres.sh && \
    /docker-entrypoint-initdb.d/init-postgres.sh

# Set Java options
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/./urandom"

# Set PostgreSQL environment variables
ENV POSTGRES_DB=ambulance_db \
    POSTGRES_USER=postgres \
    POSTGRES_PASSWORD=root

# Expose all necessary ports
EXPOSE 5432 8761 8084 8095 8096 8093

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD curl -f http://localhost:8761/actuator/health || exit 1

# Start supervisor
CMD ["supervisord", "-c", "/etc/supervisord.conf"]
